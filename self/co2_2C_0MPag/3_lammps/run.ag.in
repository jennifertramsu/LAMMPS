#----------------------------------------------------------------------------------------------
# Author        : André Guerra
# Date          : November, 2021
# Description   : 
# Notes         : 
#----------------------------------------------------------------------------------------------

# Initialization Section ----------------------------------------------------------------------

units           real
atom_style      full
# pair style dependent on water model selected
if "${wat} == tip4pice" then &
    "pair_style      lj/cut/tip4p/long 1 2 1 1 0.1577 8.5 8.5 # OM dist, coulombic cutoff"
if "${wat} == tip4p2005" then &
    "pair_style      lj/cut/tip4p/long 1 2 1 1 0.1546 8.5 8.5 # OM dist, coulombic cutoff"
pair_modify     tail yes
kspace_style    pppm/tip4p 1.0e-5
pair_modify     mix arithmetic # Lorenz – Berthelot mixing rules
neighbor        2.0 bin
neigh_modify    every 1 delay 0 check yes
bond_style      harmonic
angle_style     harmonic

# define new system or restart previous one
if "${restart_sim} == data" then & 
    "read_data ${restartFile}" &
elif "${restart_sim} == restart" & 
    "read_restart ${restartFile}" &
else &
    "read_data system.data" &
    "replicate   3 1 1"

# import molecule information depending on system simulated and water model used
if "(${meth} == methane) && (${wat} == tip4pice)" then "include tip4p-ice-oplsaa-methane.data"
if "(${meth} == methane) && (${wat} == tip4p2005)" then "include tip4p2005-oplsaa-methane.data"
if "(${meth} == water) && (${wat} == tip4pice)" then "include tip4p-ice.data"
if "(${meth} == water) && (${wat} == tip4p2005)" then "include tip4p2005.data"

# Variables Definition ------------------------------------------------------------------------

# convert from LAMMPS real units to SI
variable        atm2Pa equal 101325.0
variable        MPa2atm equal 9.86923
variable        A2m equal 1.0e-10
variable        A2tomm2 equal 1.0e-14
variable        A2tom2 equal 1.0e-20
variable        fs2s equal 1.0e-15
variable        A3_m3 equal 1.0e-30
variable        m3_cm3 equal 1.0e6
variable        Avogadro equal 6.0221412e23
variable        kCal2J equal 4184/${Avogadro}

#----------------------------------------------------------
# Test conditions
variable        Ptest equal 0.1 # MPa
variable        T equal 298.0   # K
#----------------------------------------------------------

# constants
variable        dim equal 3                         # dimension of simulation
variable        kB equal 1.3806504e-23              # [J/K] Boltzmann
variable        dt equal 2.0                        # femtoseconds
variable        P equal ${Ptest}*${MPa2atm}
variable        Pdamp equal 1000*${dt}              # damp ~ 1000 timesteps
variable        Tdamp equal 100*${dt}               # damp ~ 100 timesteps
variable        V equal vol                         # volume [A3]
variable        p equal 400 #50                         # correlation length
variable        s equal 5                           # sample interval
variable        d equal $p*$s                       # dump interval
variable        H2O_MM equal 18.02                  # H2O molec mass
variable        CH4_MM equal 16.04                  # CH4 molec mass
variable        H2O_molecs equal count(water)/3     # number of H2O molecs
if "${meth} == methane" then &
    "variable        CH4_molecs equal count(methane)/5 # number of CH4 molecs"
# NOTE: 3 atoms/H2O molec; 5 atom/CH4 molec because AA model

#----------------------------------------------------------------------------------------------
# minimization protocol --
if "${restart_sim} == false" then & 
    "thermo          50" &
    "minimize        1.0e-4 1.0e-6 10000 100000 # etol ftol iter eval" &

#----------------------------------------------------------------------------------------------
# Simulation protocol --

# assign velocities randomly using a Gaussian distribution
if "${restart_sim} == false" then &
    "velocity        all create ${T} ${seed} loop geom mom yes rot yes dist gaussian"
# assign velocities randomly using a Gaussian distribution
if "${replicate} == true" then &
    "velocity        all create ${T} ${seed} loop geom mom yes rot yes dist gaussian"

# produce final coordinates file (with cmd dump) for visualization
variable        dumpFreq equal $d*20
# dump            trj all atom ${dumpFreq} traj/traj.${ensemble}.lammps
# dump            trjdcd all dcd ${dumpFreq} traj/traj.${ensemble}.dcd
# dump            trj all atom ${dt} traj/traj.hbonds.${ensemble}.lammps
dump            trjdcd all dcd ${dt} traj/traj.hbonds.${ensemble}.dcd

# make water molecule bonds rigid using share
if "${meth} == methane" then &
    "fix fixshake water shake 0.0001 100 0 a 2 b 2 # eliminate vel components down bonds" &
else &
    "fix fixshake water shake 0.0001 100 0 a 1 b 1 # eliminate vel components down bonds"
# select ensemble
if "${ensemble} == nve" then &
    "fix fixnve all nve # micro-canonical ensemble" &
    "#fix t all langevin $T $T ${Tdamp} ${seed} # langevin"
if "${ensemble} == nvt" then &
    "fix fixnvt all nvt temp $T $T ${Tdamp} # nvt ensemble - Nose-Hoover thermostat"
if "${ensemble} == npt" then &
    "fix fixnpt all npt temp $T $T ${Tdamp} iso $P $P ${Pdamp} drag 20.0 # npt ensemble"

# #----------------------------------------------------------------------------------------------
# # Radius of gyration
# compute         waterMolecs all chunk/atom molecule
# compute         gyrChunk all gyration/chunk waterMolecs
# fix             gyr all ave/time $s $p $d c_gyrChunk file ./fix/${ensemble}/gyration_fix.txt mode vector

# #----------------------------------------------------------------------------------------------
# # Viscosity calculation -- Green-Kubo algorithm

variable        endstep equal step
variable        rstrtstep equal ${endstep}
reset_timestep  0
variable        ttlstep equal ${rstrtstep}+step
# variable        pxy equal pxy
# variable        pxz equal pxz
# variable        pyz equal pyz
# variable        pxx equal pxx-press
# variable        pyy equal pyy-press
# variable        pzz equal pzz-press
# fix             S0St all ave/correlate $s $p $d v_pxy v_pxz v_pyz v_pxx v_pyy v_pzz & 
#                 type auto file ./fix/${ensemble}/S0St_fix.txt ave running
# variable        convert equal ${atm2Pa}*${atm2Pa}*${fs2s}*${A3_m3}
# # factor does not have 1/3 factor in in.gk.2d example BUT as described by
# # https://github.com/ejmaginn/TransportCheckList/issues/4 the normalization factor may be missing
# # normalization factor of 1/3 used here as we use 3 independent components of the press tensor
# # variable        factor equal vol/(${kB}*v_T)*dt*$s
# variable        diagfrac equal 2-2/${dim}
# # variable        v12 equal trap(f_S0St[3])*v_factor*${convert} # Pa.s
# # variable        v13 equal trap(f_S0St[4])*v_factor*${convert} # Pa.s
# # variable        v23 equal trap(f_S0St[5])*v_factor*${convert} # Pa.s
# # variable        v11 equal trap(f_S0St[6])*v_factor*${convert}/${diagfrac} # Pa.s
# # variable        v22 equal trap(f_S0St[7])*v_factor*${convert}/${diagfrac} # Pa.s
# # variable        v33 equal trap(f_S0St[8])*v_factor*${convert}/${diagfrac} # Pa.s

# # variable        ViscGK equal (v_v12+v_v13+v_v23+v_v11+v_v22+v_v33)*1000/6.0 # mPa.s = cP
# # variable        ViscGK equal (v_v12+v_v13+v_v23)*1000/3.0 # mPa.s = cP

# #----------------------------------------------------------------------------------------------
# # Viscosity calculation -- Einstein formulation

# fix             avgstress all ave/time $s $p $d v_pxy v_pxz v_pyz v_pxx v_pyy v_pzz &
#                 ave one file ./fix/${ensemble}/avgstress3d_fix.txt
# # variable        scale equal vol/(2.0*${kB}*v_T*dt*$d)
# variable        deltasqxy equal (f_avgstress[1]*$d*dt)^2
# variable        deltasqxz equal (f_avgstress[2]*$d*dt)^2
# variable        deltasqyz equal (f_avgstress[3]*$d*dt)^2
# variable        deltasqxx equal (f_avgstress[4]*$d*dt)^2/${diagfrac}
# variable        deltasqyy equal (f_avgstress[5]*$d*dt)^2/${diagfrac}
# variable        deltasqzz equal (f_avgstress[6]*$d*dt)^2/${diagfrac}

# # compute mean square displacements as running averages
# # average over 2000 fs introduces 1/fs to units
# fix             avgdeltasq all ave/time $d 1 $d v_deltasqxy v_deltasqxz v_deltasqyz v_deltasqxx v_deltasqyy v_deltasqzz &
#                 ave running file ./fix/${ensemble}/avgdeltasq_fix.txt

# # convert to viscosities
# # variable        vxy equal f_avgdeltasq[1]*v_scale*${convert} # Pa.s
# # variable        vxz equal f_avgdeltasq[2]*v_scale*${convert} # Pa.s
# # variable        vyz equal f_avgdeltasq[3]*v_scale*${convert} # Pa.s
# # variable        vxx equal f_avgdeltasq[4]*v_scale*${convert} # Pa.s
# # variable        vyy equal f_avgdeltasq[5]*v_scale*${convert} # Pa.s
# # variable        vzz equal f_avgdeltasq[6]*v_scale*${convert} # Pa.s

# # variable        ViscEin equal (v_vxy+v_vxz+v_vyz+v_vxx+v_vyy+v_vzz)*1000/6.0 # mPa.s = cP
# # variable        ViscEin equal (v_vxy+v_vxz+v_vyz)*1000/3.0 # mPa.s = cP

# #----------------------------------------------------------------------------------------------
# # Diffusion coefficient calculation -- Green-Kubo algorithm
# # vacf = velocity autocorrelation function

# compute         vAutoCorrFxn all vacf
# fix             vACFavg all ave/time $s $p $d c_vAutoCorrFxn[1] c_vAutoCorrFxn[2] c_vAutoCorrFxn[3] & 
#                 c_vAutoCorrFxn[4] file ./fix/${ensemble}/vacf_fix.txt
# # fix             vAutoCorrVec all vector $d c_vAutoCorrFxn[4]
# # factor 1/3 for 3d (ref :http://manual.gromacs.org/documentation/2019-rc1/reference-manual/analysis/correlation-function.html)
# # variable        DiffGK equal (1/3.0)*trap(f_vAutoCorrVec)*dt*$d*(${A2tomm2}/${fs2s}) # mm2/s

# #----------------------------------------------------------------------------------------------
# # Diffusion coefficient calculation -- Einstein mean square displacement (msd)

# compute         msd all msd com yes
# fix             fixmsd all ave/time $s $p $d c_msd[4] file ./fix/${ensemble}/msd_fix.txt
# # following variable calc from /examples/DIFFUSE/in.msd.2d
# # factor of 6 in 3d (?) - see last slide rheology with lammps presentation (deck 07)
# # and eq. 5.2.4 in The art of molecular dynamics
# # variable        Diff2pt equal c_msd[4]/6/(step*dt+1.0e-6)*(${A2tomm2}/${fs2s}) # mm2/s
# # fix             msdVector all vector $d c_msd[4] # A2
# # variable        DiffMSD equal slope(f_msdVector)/6/($d*dt)*(${A2tomm2}/${fs2s}) # mm2/s

# #----------------------------------------------------------------------------------------------
# # Heat conductivity
# compute         kePerAtom all ke/atom
# compute         pePerAtom all pe/atom
# compute         stressPerAtom all stress/atom NULL virial
# compute         flux all heat/flux kePerAtom pePerAtom stressPerAtom # kcal.A/fs
# # variable        Jx equal c_flux[1]/vol # kcal/(A2.fs)
# # variable        Jy equal c_flux[2]/vol # kcal/(A2.fs)
# # variable        Jz equal c_flux[3]/vol # kcal/(A2.fs)

# fix             J0Jt all ave/correlate $s $p $d c_flux[1] c_flux[2] c_flux[3] &
#                 type auto file ./fix/${ensemble}/J0Jt_fix.txt ave running
# # variable        convertkappa equal ${kCal2J}*${kCal2J}/(${fs2s}*${A2m})
# # variable        scalekappa equal 1/(${kB}*v_T*v_T*vol)*$s*dt
# # variable        k11 equal trap(f_J0Jt[3])*${scalekappa}*${convertkappa} # W/m.K
# # variable        k22 equal trap(f_J0Jt[4])*${scalekappa}*${convertkappa} # W/m.K
# # variable        k33 equal trap(f_J0Jt[5])*${scalekappa}*${convertkappa} # W/m.K

# # variable        kappa equal (v_k11+v_k22+v_k33)/3.0 # W/m.K

#----------------------------------------------------------------------------------------------
# average property calculations
variable        H2O_mass equal ${H2O_molecs}*(${H2O_MM}/${Avogadro})
if "${meth} == methane" then &
    "variable        CH4_mass equal ${CH4_molecs}*(${CH4_MM}/${Avogadro})" &
    "variable        rho equal (${H2O_mass}+${CH4_mass})/(vol*${A3_m3}*${m3_cm3})" &
else &
    "variable        rho equal ${H2O_mass}/(vol*${A3_m3}*${m3_cm3})"
fix             rhoAve all ave/time $s $p $d v_rho &
                file ./fix/${ensemble}/density_fix.txt

compute         T all temp
fix             tempAve all ave/time $s $p $d c_T

variable        P equal press
fix             pressAve all ave/time $s $p $d v_P

compute         PE all pe pair kspace
if "${meth} == methane" then &
    "variable        PEmol equal c_PE/(${H2O_molecs}+${CH4_molecs})" &
else &
    "variable        PEmol equal c_PE/${H2O_molecs}"
fix             avePEmol all ave/time $s $p $d v_PEmol

variable        initStep equal step
variable        fracDone equal (step-${initStep})/${steps}
variable        ttlFracDone equal v_ttlstep/(${steps}+${rstrtstep})

# #----------------------------------------------------------------------------------------------
# # stress tensor
# fix             stress all ave/time $s $p $d c_thermo_press[1] c_thermo_press[2] c_thermo_press[3] &
#                 c_thermo_press[4] c_thermo_press[5] c_thermo_press[6] file ./fix/${ensemble}/stress_tensor_fix.txt

# setting restart frequency
restart         ${restart_freq} ./restart/restart_${ensemble}_*step.data

timestep        ${dt}   # 2.0 fs
thermo_style    custom step v_fracDone v_ttlstep v_ttlFracDone temp f_tempAve press f_pressAve &
                vol density v_rho f_rhoAve pe v_PEmol f_avePEmol ke etotal 
                # v_ViscGK v_ViscEin v_DiffGK v_DiffMSD v_Diff2pt &
                # c_msd[4] c_vAutoCorrFxn[4] v_k11 v_k22 v_k33 v_kappa

thermo_modify   flush yes # no buffer; output to file is online
thermo          $d # 2000 fs; must be the same as fix calculation intervals

# run 1 nanoseconds
run             ${steps} # timesteps
# rerun ./traj/traj.${ensemble}.lammps dump x y z

# write system end state
write_data      ./data/systemEnd_hbond.${ensemble}_*step.data

# output a restart file
write_restart   ./restart/restartEnd_hbond.${ensemble}_*step.data

# End -----------------------------------------------------------------------------------------

